// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                   String                 @id @default(uuid())
  title                AcademicSemesterTitle
  year                 String
  code                 String
  startMonth           AcademicSemesterMonth
  endMonth             AcademicSemesterMonth
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  students             Student[]
  SemesterRegistration SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                 String               @id @default(uuid())
  title              String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  students           Student[]
  faculties          Faculty[]
  AcademicDepartment AcademicDepartment[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String          @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students          Student[]
  faculties         Faculty[]
  offeredCourses    OfferedCourse[]

  @@map("academic_departments")
}

model Faculty {
  id                          String                       @id @default(uuid())
  firstName                   String
  lastName                    String?
  middleName                  String?
  dateOfBirth                 DateTime?
  gender                      Gender?
  bloodGroup                  String?
  email                       String                       @unique
  contactNo                   String?
  emergencyContactNo          String?
  presentAddress              String?
  permanentAddress            String?
  designation                 String?
  profileImage                String?
  academicFacultyId           String
  academicDepartmentId        String
  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  academicDepartment          AcademicDepartment           @relation(fields: [academicDepartmentId], references: [id])
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Student {
  id                     String    @id @default(uuid())
  studentId              String?
  firstName              String
  lastName               String?
  middleName             String?
  dateOfBirth            DateTime?
  gender                 Gender?
  bloodGroup             String?
  email                  String    @unique
  contactNo              String?
  emergencyContactNo     String?
  presentAddress         String?
  permanentAddress       String?
  profileImage           String?
  fatherName             String?
  fatherOccupation       String?
  fatherContactNo        String?
  motherName             String?
  motherOccupation       String?
  motherContactNo        String?
  address                String?
  localGuardianName      String?
  localGuardianContactNo String?
  localGuardianAdress    String?

  academicDepartmentId String
  academicSemesterId   String
  academicFacultyId    String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])

  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("students")
}

model Room {
  id                          String                       @id @default(uuid())
  floor                       String
  roomNumber                  String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  buildingId                  String
  building                    Building                     @relation(fields: [buildingId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Room      Room[]

  @@map("buildings")
}

model Course {
  id        String   @id @default(uuid())
  title     String
  code      String
  credits   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // preRequisite Course
  preRequisite    CoursePrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CoursePrerequisite[] @relation("PrerequisiteToCourse")
  offeredCourses  OfferedCourse[]

  @@map("courses")
}

model CoursePrerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, preRequisiteId])
}

model SemesterRegistration {
  id                                 String                              @id @default(uuid())
  startDate                          DateTime
  endDate                            DateTime
  status                             SemesterRegistrationStatus          @default(UPCOMING)
  minCredit                          Int                                 @default(0)
  maxCredit                          Int                                 @default(0)
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  offeredCourses                     OfferedCourse[]
  offeredCourseSections              OfferedCourseSection[]
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  academicSemesterId String
  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  @@map("semester_ragistration")
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  offeredCourseSections              OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course")
}

model OfferedCourseSection {
  id                       String   @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int      @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  offeredCourseId String
  offercourse     OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course_section")
}

model OfferedCourseClassSchedule {
  id        String   @id @default(uuid())
  startTime String
  endTime   String
  dayOfWeek WeekDays @default(SUNDAY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offeredCourseSectionId String
  OfferedCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  SemesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  roomId    String
  room      Room    @relation(fields: [roomId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedules")
}

model StudentSemesterRegistration {
  id                String   @id @default(uuid())
  isConfirmed       Boolean?
  totalCreditsTaken Int?     @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registrations")
}

model StudentSemesterRegistrationCourse {
  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  offerCourseId String
  offerCourse   OfferedCourse @relation(fields: [offerCourseId], references: [id])

  offeredCourseSectionId String
  offerCourseSection     OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([semesterRegistrationId, studentId, offerCourseId])
  @@map("student_semester_registrations_course")
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum AcademicSemesterTitle {
  Autumn
  Summer
  Fall
}

enum Gender {
  Male
  Female
}

enum AcademicSemesterMonth {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
